from django.core.mail import send_mail
from django.conf import settings
from django.db.models.signals import pre_save, post_save
from django.dispatch import receiver
from .models import PlantedTree


def send_tree_care_email(user, conditions, condition):
    subject = '–°–µ–º–µ–π–Ω–æ–µ –î—Ä–µ–≤–æ: –£—Ö–æ–¥ –∑–∞ –¥–µ—Ä–µ–≤–æ–º'
    base_message = f'–£–≤–∞–∂–∞–µ–º—ã–π {user.username}, –≤–∞—à–µ–º—É –¥–µ—Ä–µ–≤—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ö–æ–¥:\n\n'

    messages = {
        'watering': '‚õ≤Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–∏–≤–∫–∞: –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–æ–∏—Ç—å –≤–∞—à–µ –¥–µ—Ä–µ–≤–æ. \n–í–æ–¥–∞ - –∫–ª—é—á –∫ –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –∫—Ä–∞—Å–æ—Ç–µ!\n',
        'pruning': '‚úÇÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–µ–∑–∫–∞: –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –¥–µ—Ä–µ–≤–æ –æ—Ç –ª–∏—à–Ω–∏—Ö –≤–µ—Ç–æ–∫, \n—á—Ç–æ–±—ã –æ–Ω–æ —Ä–æ—Å–ª–æ —Å–∏–ª—å–Ω—ã–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º.\n',
        'fertilizing': 'üå± –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–æ—Ä–º–∫–∞: –ü–æ–¥–∫–æ—Ä–º–∏—Ç–µ –≤–∞—à–µ –¥–µ—Ä–µ–≤–æ, \n—á—Ç–æ–±—ã –æ–Ω–æ –ø–æ–ª—É—á–∏–ª–æ –≤—Å–µ '
                       '–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–æ—Å—Ç–∞.\n'
    }

    care_messages = [messages[condition] for condition in conditions if condition in messages]
    condition_message = f'\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞: {RUSSIAN_CONDITIONS[condition]}\n\n'
    message = base_message + "\n".join(care_messages) + condition_message
    send_mail(subject, message, settings.EMAIL_HOST_USER, [user.email], fail_silently=False)


@receiver(pre_save, sender=PlantedTree)
def set_old_needs(sender, instance, **kwargs):
    if instance.pk:
        try:
            current_instance = sender.objects.get(pk=instance.pk)
            instance._old_needs = current_instance.needs
        except sender.DoesNotExist:
            instance._old_needs = []


@receiver(post_save, sender=PlantedTree)
def check_needs_change_and_send_email(sender, instance, created, **kwargs):
    if created:
        subject = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ—Å–∞–¥–∫–æ–π –≤–∞—à–µ–≥–æ –¥–µ—Ä–µ–≤–∞!'
        message = (f'üéâ –£–≤–∞–∂–∞–µ–º—ã–π {instance.user.username}, –º—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤–∞—à–µ –¥–µ—Ä–µ–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–∞–∂–µ–Ω–æ. '
                   f'–ñ–µ–ª–∞–µ–º –µ–º—É —Ä–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–º –∏ –∫—Ä–µ–ø–∫–∏–º! üå±')
        send_mail(subject, message, settings.EMAIL_HOST_USER, [instance.user.email], fail_silently=False)
    old_needs = getattr(instance, '_old_needs', [])
    if set(old_needs) != set(instance.needs):
        conditions = list(set(instance.needs) - set(old_needs))
        if conditions and instance.user:
            send_tree_care_email(instance.user, conditions, instance.condition)


@receiver(pre_save, sender=PlantedTree)
def update_tree_condition(sender, instance, **kwargs):
    if instance.needs:
        if len(instance.needs) == 1:
            instance.condition = 'medium'
        elif len(instance.needs) == 2:
            instance.condition = 'bad'
        else:
            instance.condition = 'terrible'
    else:
        instance.condition = 'good'


RUSSIAN_CONDITIONS = {
    'good': '–•–æ—Ä–æ—à–æ',
    'medium': '–°—Ä–µ–¥–Ω–µ',
    'bad': '–ü–ª–æ—Ö–æ',
    'terrible': '–£–∂–∞—Å–Ω–æ',
}
